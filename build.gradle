plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = '1.1.2'
group = 'com.phoenix_wb.cursedcrypts'
archivesBaseName = 'cursedcrypts'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '2022.10.09-1.19.2'
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs { 
        all {
            def srgToMcpFile = project.tasks.createSrgToMcp.outputs.files[0].path

            property 'net.minecraftforge.gradle.GradleStart.srg.srg-mcp', srgToMcpFile
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', srgToMcpFile
        }
    
    	
        client {            
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'cursedcrypts'

            mods {
                cursedcrypts {
                    source sourceSets.main
                }
            }
        }

        server {            
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'cursedcrypts'

            mods {
                cursedcrypts {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'cursedcrypts'

            mods {
                cursedcrypts {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'cursedcrypts', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                cursedcrypts {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
	maven {
        name "Modding Legacy Maven"
        url "https://maven.moddinglegacy.com/maven"
    }
	
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.1.1' 
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.19:3.1.27')
    implementation fg.deobf("com.legacy:structure-gel:1.19.2-2.7.0")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "cursedcrypts",
                "Specification-Vendor"    : "phoenix_wb",
                "Specification-Version"   : "1.1.2", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "phoenix_wb",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
